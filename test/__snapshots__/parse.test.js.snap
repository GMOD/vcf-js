// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Obscure VCF vcf lines with weird info field and missing format/genotypes 1`] = `
Array [
  Variant {
    "ALT": Array [
      "A",
    ],
    "CHROM": "lcl|Scaffald_1",
    "FILTER": "PASS",
    "ID": Array [
      "rs118266897",
    ],
    "INFO": Object {
      "0,14": null,
      "112": null,
      "AF": Array [
        0.5,
      ],
      "DB": true,
      "NS": Array [
        3,
      ],
      "PG2.1": null,
    },
    "POS": 80465,
    "QUAL": 29,
    "REF": "R",
  },
  Variant {
    "ALT": Array [
      "G",
    ],
    "CHROM": "lcl|Scaffald_1",
    "FILTER": "PASS",
    "ID": Array [
      "rs118269296",
    ],
    "INFO": Object {
      "0,14": null,
      "112": null,
      "AF": Array [
        0.5,
      ],
      "DB": true,
      "NS": Array [
        3,
      ],
      "PG2.1": null,
    },
    "POS": 84818,
    "QUAL": 29,
    "REF": "R",
  },
  Variant {
    "ALT": Array [
      "T",
    ],
    "CHROM": "lcl|Scaffald_1",
    "FILTER": "PASS",
    "ID": Array [
      "rs118218236",
    ],
    "INFO": Object {
      "0,14": null,
      "112": null,
      "AF": Array [
        0.5,
      ],
      "DB": true,
      "NS": Array [
        3,
      ],
      "PG2.1": null,
    },
    "POS": 95414,
    "QUAL": 29,
    "REF": "W",
  },
  Variant {
    "ALT": Array [
      "A",
    ],
    "CHROM": "lcl|Scaffald_1",
    "FILTER": "PASS",
    "ID": Array [
      "rs118264755",
    ],
    "INFO": Object {
      "0,14": null,
      "112": null,
      "AF": Array [
        0.5,
      ],
      "DB": true,
      "NS": Array [
        3,
      ],
      "PG2.1": null,
    },
    "POS": 231384,
    "QUAL": 29,
    "REF": "R",
  },
  Variant {
    "ALT": Array [
      "G",
    ],
    "CHROM": "lcl|Scaffald_1",
    "FILTER": "PASS",
    "ID": Array [
      "rs118223336",
    ],
    "INFO": Object {
      "0,14": null,
      "112": null,
      "AF": Array [
        6.5,
      ],
      "DB": true,
      "NS": Array [
        3,
      ],
      "PG2.1": null,
    },
    "POS": 236429,
    "QUAL": 29,
    "REF": "R",
  },
  Variant {
    "ALT": Array [
      "G",
    ],
    "CHROM": "lcl|Scaffald_1",
    "FILTER": "PASS",
    "ID": Array [
      "rs118217257",
    ],
    "INFO": Object {
      "0,14": null,
      "112": null,
      "AF": Array [
        0.5,
      ],
      "DB": true,
      "NS": Array [
        3,
      ],
      "PG2.1": null,
    },
    "POS": 245378,
    "QUAL": 29,
    "REF": "R",
  },
]
`;

exports[`VCF parser can get metadata from the header 1`] = `
Object {
  "ALT": Object {
    "*": Object {
      "Description": "Represents any possible alternative allele at this location",
    },
    "CNV": Object {
      "Description": "Copy number variable region (may be both deletion and duplication)",
    },
    "DEL": Object {
      "Description": "Deletion relative to the reference",
    },
    "DEL:ME": Object {
      "Description": "Deletion of mobile element relative to the reference",
    },
    "DUP": Object {
      "Description": "Region of elevated copy number relative to the reference",
    },
    "DUP:TANDEM": Object {
      "Description": "Tandem duplication",
    },
    "INS": Object {
      "Description": "Insertion of novel sequence relative to the reference",
    },
    "INS:ME": Object {
      "Description": "Insertion of a mobile element relative to the reference",
    },
    "INV": Object {
      "Description": "Inversion of reference sequence",
    },
    "NON_REF": Object {
      "Description": "Represents any possible alternative allele at this location",
    },
  },
  "FILTER": Object {
    "PASS": Object {
      "Description": "Passed all filters",
    },
    "q10": Object {
      "Description": "Quality below 10",
    },
    "s50": Object {
      "Description": "Less than 50% of samples have data",
    },
  },
  "FORMAT": Object {
    "AD": Object {
      "Description": "Read depth for each allele",
      "Number": "R",
      "Type": "Integer",
    },
    "ADF": Object {
      "Description": "Read depth for each allele on the forward strand",
      "Number": "R",
      "Type": "Integer",
    },
    "ADR": Object {
      "Description": "Read depth for each allele on the reverse strand",
      "Number": "R",
      "Type": "Integer",
    },
    "DP": Object {
      "Description": "Read Depth",
      "Number": 1,
      "Type": "Integer",
    },
    "EC": Object {
      "Description": "Expected alternate allele counts",
      "Number": "A",
      "Type": "Integer",
    },
    "FT": Object {
      "Description": "Filter indicating if this genotype was \\"called\\"",
      "Number": 1,
      "Type": "String",
    },
    "GL": Object {
      "Description": "Genotype likelihoods",
      "Number": "G",
      "Type": "Float",
    },
    "GP": Object {
      "Description": "Genotype posterior probabilities",
      "Number": "G",
      "Type": "Float",
    },
    "GQ": Object {
      "Description": "Genotype Quality",
      "Number": 1,
      "Type": "Integer",
    },
    "GT": Object {
      "Description": "Genotype",
      "Number": 1,
      "Type": "String",
    },
    "HQ": Object {
      "Description": "Haplotype Quality",
      "Number": 2,
      "Type": "Integer",
    },
    "MQ": Object {
      "Description": "RMS mapping quality",
      "Number": 1,
      "Type": "Integer",
    },
    "PL": Object {
      "Description": "List of Phred-scaled genotype likelihoods",
      "Number": "G",
      "Type": "Integer",
    },
    "PQ": Object {
      "Description": "Phasing quality",
      "Number": 1,
      "Type": "Integer",
    },
    "PS": Object {
      "Description": "Phase set",
      "Number": 1,
      "Type": "Integer",
    },
    "TEST": Object {
      "Description": "Used for testing",
      "Number": 1,
      "Type": "String",
    },
  },
  "INFO": Object {
    "1000G": Object {
      "Description": "1000 Genomes membership",
      "Number": 0,
      "Type": "Flag",
    },
    "AA": Object {
      "Description": "Ancestral Allele",
      "Number": 1,
      "Type": "String",
    },
    "AC": Object {
      "Description": "Allele count in genotypes, for each ALT allele, in the same order as listed",
      "Number": "A",
      "Type": "Integer",
    },
    "AD": Object {
      "Description": "Total read depth for each allele",
      "Number": "R",
      "Type": "Integer",
    },
    "ADF": Object {
      "Description": "Read depth for each allele on the forward strand",
      "Number": "R",
      "Type": "Integer",
    },
    "ADR": Object {
      "Description": "Read depth for each allele on the reverse strand",
      "Number": "R",
      "Type": "Integer",
    },
    "AF": Object {
      "Description": "Allele Frequency",
      "Number": "A",
      "Type": "Float",
    },
    "AN": Object {
      "Description": "Total number of alleles in called genotypes",
      "Number": 1,
      "Type": "Integer",
    },
    "BKPTID": Object {
      "Description": "ID of the assembled alternate allele in the assembly file",
      "Type": "String",
    },
    "BQ": Object {
      "Description": "RMS base quality",
      "Number": 1,
      "Type": "Float",
    },
    "CICN": Object {
      "Description": "Confidence interval around copy number for the segment",
      "Number": 2,
      "Type": "Integer",
    },
    "CICNADJ": Object {
      "Description": "Confidence interval around copy number for the adjacency",
      "Number": null,
      "Type": "Integer",
    },
    "CIEND": Object {
      "Description": "Confidence interval around END for imprecise variants",
      "Number": 2,
      "Type": "Integer",
    },
    "CIGAR": Object {
      "Description": "Cigar string describing how to align an alternate allele to the reference allele",
      "Number": 1,
      "Type": "Float",
    },
    "CILEN": Object {
      "Description": "Confidence interval around the inserted material between breakend",
      "Number": 2,
      "Type": "Integer",
    },
    "CIPOS": Object {
      "Description": "Confidence interval around POS for imprecise variants",
      "Number": 2,
      "Type": "Integer",
    },
    "CN": Object {
      "Description": "Copy number of segment containing breakend",
      "Number": 1,
      "Type": "Integer",
    },
    "CNADJ": Object {
      "Description": "Copy number of adjacency",
      "Number": null,
      "Type": "Integer",
    },
    "DB": Object {
      "Description": "dbSNP membership, build 129",
      "Number": 0,
      "Type": "Flag",
    },
    "DBRIPID": Object {
      "Description": "ID of this element in DBRIP",
      "Number": 1,
      "Type": "String",
    },
    "DBVARID": Object {
      "Description": "ID of this element in DBVAR",
      "Number": 1,
      "Type": "String",
    },
    "DGVID": Object {
      "Description": "ID of this element in Database of Genomic Variation",
      "Number": 1,
      "Type": "String",
    },
    "DP": Object {
      "Description": "Total Depth",
      "Number": 1,
      "Type": "Integer",
    },
    "DPADJ": Object {
      "Description": "Read Depth of adjacency",
      "Type": "Integer",
    },
    "END": Object {
      "Description": "End position (for use with symbolic alleles)",
      "Number": 1,
      "Type": "Integer",
    },
    "EVENT": Object {
      "Description": "ID of event associated to breakend",
      "Number": 1,
      "Type": "String",
    },
    "H2": Object {
      "Description": "HapMap2 membership",
      "Number": 0,
      "Type": "Flag",
    },
    "H3": Object {
      "Description": "HapMap3 membership",
      "Number": 0,
      "Type": "Flag",
    },
    "HOMLEN": Object {
      "Description": "Length of base pair identical micro-homology at event breakpoints",
      "Type": "Integer",
    },
    "HOMSEQ": Object {
      "Description": "Sequence of base pair identical micro-homology at event breakpoints",
      "Type": "String",
    },
    "IMPRECISE": Object {
      "Description": "Imprecise structural variation",
      "Number": 0,
      "Type": "Flag",
    },
    "MATEID": Object {
      "Description": "ID of mate breakends",
      "Number": null,
      "Type": "String",
    },
    "MEINFO": Object {
      "Description": "Mobile element info of the form NAME,START,END,POLARITY",
      "Number": 4,
      "Type": "String",
    },
    "METRANS": Object {
      "Description": "Mobile element transduction info of the form CHR,START,END,POLARITY",
      "Number": 4,
      "Type": "String",
    },
    "MQ": Object {
      "Description": "RMS mapping quality",
      "Number": 1,
      "Type": null,
    },
    "MQ0": Object {
      "Description": "Number of MAPQ == 0 reads",
      "Number": 1,
      "Type": "Integer",
    },
    "NOVEL": Object {
      "Description": "Indicates a novel structural variation",
      "Number": 0,
      "Type": "Flag",
    },
    "NS": Object {
      "Description": "Number of Samples With Data",
      "Number": 1,
      "Type": "Integer",
    },
    "PARID": Object {
      "Description": "ID of partner breakend",
      "Number": 1,
      "Type": "String",
    },
    "SB": Object {
      "Description": "Strand bias",
      "Number": 4,
      "Type": "Integer",
    },
    "SOMATIC": Object {
      "Description": "Somatic mutation (for cancer genomics)",
      "Number": 0,
      "Type": "Flag",
    },
    "SVLEN": Object {
      "Description": "Difference in length between REF and ALT alleles",
      "Number": null,
      "Type": "Integer",
    },
    "SVTYPE": Object {
      "Description": "Type of structural variant",
      "Number": 1,
      "Type": "String",
    },
    "TEST": Object {
      "Description": "Used for testing",
      "Number": 1,
      "Type": "String",
    },
    "VALIDATED": Object {
      "Description": "Validated by follow-up experiment",
      "Number": 0,
      "Type": "Flag",
    },
  },
  "contig": Object {
    "20": Object {
      "assembly": "B36",
      "length": "62435964",
      "md5": "f126cdf8a6e0c7f379d618ff66beb2da",
      "species": "Homo sapiens",
      "taxonomy": "x",
    },
  },
  "fileDate": "20090805",
  "fileformat": "VCFv4.3",
  "phasing": "partial",
  "reference": "file:///seq/references/1000GenomesPilot-NCBI36.fasta",
  "source": "myImputationProgramV3.1",
}
`;

exports[`VCF parser can get metadata from the header 2`] = `
Object {
  "1000G": Object {
    "Description": "1000 Genomes membership",
    "Number": 0,
    "Type": "Flag",
  },
  "AA": Object {
    "Description": "Ancestral Allele",
    "Number": 1,
    "Type": "String",
  },
  "AC": Object {
    "Description": "Allele count in genotypes, for each ALT allele, in the same order as listed",
    "Number": "A",
    "Type": "Integer",
  },
  "AD": Object {
    "Description": "Total read depth for each allele",
    "Number": "R",
    "Type": "Integer",
  },
  "ADF": Object {
    "Description": "Read depth for each allele on the forward strand",
    "Number": "R",
    "Type": "Integer",
  },
  "ADR": Object {
    "Description": "Read depth for each allele on the reverse strand",
    "Number": "R",
    "Type": "Integer",
  },
  "AF": Object {
    "Description": "Allele Frequency",
    "Number": "A",
    "Type": "Float",
  },
  "AN": Object {
    "Description": "Total number of alleles in called genotypes",
    "Number": 1,
    "Type": "Integer",
  },
  "BKPTID": Object {
    "Description": "ID of the assembled alternate allele in the assembly file",
    "Type": "String",
  },
  "BQ": Object {
    "Description": "RMS base quality",
    "Number": 1,
    "Type": "Float",
  },
  "CICN": Object {
    "Description": "Confidence interval around copy number for the segment",
    "Number": 2,
    "Type": "Integer",
  },
  "CICNADJ": Object {
    "Description": "Confidence interval around copy number for the adjacency",
    "Number": null,
    "Type": "Integer",
  },
  "CIEND": Object {
    "Description": "Confidence interval around END for imprecise variants",
    "Number": 2,
    "Type": "Integer",
  },
  "CIGAR": Object {
    "Description": "Cigar string describing how to align an alternate allele to the reference allele",
    "Number": 1,
    "Type": "Float",
  },
  "CILEN": Object {
    "Description": "Confidence interval around the inserted material between breakend",
    "Number": 2,
    "Type": "Integer",
  },
  "CIPOS": Object {
    "Description": "Confidence interval around POS for imprecise variants",
    "Number": 2,
    "Type": "Integer",
  },
  "CN": Object {
    "Description": "Copy number of segment containing breakend",
    "Number": 1,
    "Type": "Integer",
  },
  "CNADJ": Object {
    "Description": "Copy number of adjacency",
    "Number": null,
    "Type": "Integer",
  },
  "DB": Object {
    "Description": "dbSNP membership, build 129",
    "Number": 0,
    "Type": "Flag",
  },
  "DBRIPID": Object {
    "Description": "ID of this element in DBRIP",
    "Number": 1,
    "Type": "String",
  },
  "DBVARID": Object {
    "Description": "ID of this element in DBVAR",
    "Number": 1,
    "Type": "String",
  },
  "DGVID": Object {
    "Description": "ID of this element in Database of Genomic Variation",
    "Number": 1,
    "Type": "String",
  },
  "DP": Object {
    "Description": "Total Depth",
    "Number": 1,
    "Type": "Integer",
  },
  "DPADJ": Object {
    "Description": "Read Depth of adjacency",
    "Type": "Integer",
  },
  "END": Object {
    "Description": "End position (for use with symbolic alleles)",
    "Number": 1,
    "Type": "Integer",
  },
  "EVENT": Object {
    "Description": "ID of event associated to breakend",
    "Number": 1,
    "Type": "String",
  },
  "H2": Object {
    "Description": "HapMap2 membership",
    "Number": 0,
    "Type": "Flag",
  },
  "H3": Object {
    "Description": "HapMap3 membership",
    "Number": 0,
    "Type": "Flag",
  },
  "HOMLEN": Object {
    "Description": "Length of base pair identical micro-homology at event breakpoints",
    "Type": "Integer",
  },
  "HOMSEQ": Object {
    "Description": "Sequence of base pair identical micro-homology at event breakpoints",
    "Type": "String",
  },
  "IMPRECISE": Object {
    "Description": "Imprecise structural variation",
    "Number": 0,
    "Type": "Flag",
  },
  "MATEID": Object {
    "Description": "ID of mate breakends",
    "Number": null,
    "Type": "String",
  },
  "MEINFO": Object {
    "Description": "Mobile element info of the form NAME,START,END,POLARITY",
    "Number": 4,
    "Type": "String",
  },
  "METRANS": Object {
    "Description": "Mobile element transduction info of the form CHR,START,END,POLARITY",
    "Number": 4,
    "Type": "String",
  },
  "MQ": Object {
    "Description": "RMS mapping quality",
    "Number": 1,
    "Type": null,
  },
  "MQ0": Object {
    "Description": "Number of MAPQ == 0 reads",
    "Number": 1,
    "Type": "Integer",
  },
  "NOVEL": Object {
    "Description": "Indicates a novel structural variation",
    "Number": 0,
    "Type": "Flag",
  },
  "NS": Object {
    "Description": "Number of Samples With Data",
    "Number": 1,
    "Type": "Integer",
  },
  "PARID": Object {
    "Description": "ID of partner breakend",
    "Number": 1,
    "Type": "String",
  },
  "SB": Object {
    "Description": "Strand bias",
    "Number": 4,
    "Type": "Integer",
  },
  "SOMATIC": Object {
    "Description": "Somatic mutation (for cancer genomics)",
    "Number": 0,
    "Type": "Flag",
  },
  "SVLEN": Object {
    "Description": "Difference in length between REF and ALT alleles",
    "Number": null,
    "Type": "Integer",
  },
  "SVTYPE": Object {
    "Description": "Type of structural variant",
    "Number": 1,
    "Type": "String",
  },
  "TEST": Object {
    "Description": "Used for testing",
    "Number": 1,
    "Type": "String",
  },
  "VALIDATED": Object {
    "Description": "Validated by follow-up experiment",
    "Number": 0,
    "Type": "Flag",
  },
}
`;

exports[`VCF parser can parse a line from the VCF spec 1`] = `
Variant {
  "ALT": Array [
    "A",
  ],
  "CHROM": "20",
  "FILTER": "PASS",
  "ID": Array [
    "rs6054257",
  ],
  "INFO": Object {
    "AF": Array [
      0.5,
    ],
    "DB": true,
    "DP": Array [
      14,
    ],
    "H2": true,
    "NS": Array [
      3,
    ],
  },
  "POS": 14370,
  "QUAL": 29,
  "REF": "G",
}
`;

exports[`VCF parser can parse a line from the VCF spec 2`] = `
Object {
  "NA00001": Object {
    "DP": Array [
      1,
    ],
    "GQ": Array [
      48,
    ],
    "GT": Array [
      "0|0",
    ],
    "HQ": Array [
      51,
      51,
    ],
  },
  "NA00002": Object {
    "DP": Array [
      8,
    ],
    "GQ": Array [
      48,
    ],
    "GT": Array [
      "1|0",
    ],
    "HQ": Array [
      51,
      51,
    ],
  },
  "NA00003": Object {
    "DP": Array [
      5,
    ],
    "GQ": Array [
      43,
    ],
    "GT": Array [
      "1/1",
    ],
    "HQ": Array [
      null,
      null,
    ],
  },
}
`;

exports[`VCF parser can parse a line with minimal entries 1`] = `
Variant {
  "ALT": Array [
    "A",
  ],
  "CHROM": "20",
  "FILTER": null,
  "ID": null,
  "INFO": Object {},
  "POS": 14370,
  "QUAL": null,
  "REF": "G",
}
`;

exports[`VCF parser can parse a line with minimal entries 2`] = `
Object {
  "NA00001": Object {
    "DP": null,
    "GQ": null,
    "GT": null,
    "HQ": null,
  },
  "NA00002": Object {
    "DP": null,
    "GQ": null,
    "GT": null,
    "HQ": null,
  },
  "NA00003": Object {
    "DP": null,
    "GQ": null,
    "GT": null,
    "HQ": null,
  },
}
`;

exports[`VCF parser for Y chrom (haploid) can parse a line from the VCF spec 1`] = `
Variant {
  "ALT": Array [
    "<CN0>",
  ],
  "CHROM": "Y",
  "FILTER": "PASS",
  "ID": Array [
    "CNV_Y_14483990_15232198",
  ],
  "INFO": Object {
    "AC": Array [
      1,
    ],
    "AF": Array [
      0.000817661,
    ],
    "AFR_AF": Array [
      0,
    ],
    "AMR_AF": Array [
      0,
    ],
    "AN": Array [
      1223,
    ],
    "EAS_AF": Array [
      0,
    ],
    "END": Array [
      15232198,
    ],
    "EUR_AF": Array [
      0.0042,
    ],
    "EX_TARGET": true,
    "NS": Array [
      1233,
    ],
    "SAS_AF": Array [
      0,
    ],
    "SVTYPE": Array [
      "CNV",
    ],
    "VT": Array [
      "SV",
    ],
  },
  "POS": 14483990,
  "QUAL": 100,
  "REF": "C",
}
`;

exports[`VCF parser for Y chrom (haploid) can parse a line from the VCF spec 2`] = `
Object {
  "HG00096": Object {
    "CN": Array [
      1,
    ],
    "CNL": Array [
      -1000,
      0,
      -119.08,
    ],
    "CNP": Array [
      -1000,
      0,
      -218.16,
    ],
    "CNQ": Array [
      99,
    ],
    "GP": Array [
      0,
      -1000,
    ],
    "GQ": Array [
      99,
    ],
    "GT": Array [
      "0",
    ],
    "PL": Array [
      0,
      10000,
    ],
  },
  "HG00101": Object {
    "CN": Array [
      1,
    ],
    "CNL": Array [
      -1000,
      0,
      -43.56,
    ],
    "CNP": Array [
      -1000,
      0,
      -142.64,
    ],
    "CNQ": Array [
      99,
    ],
    "GP": Array [
      0,
      -1000,
    ],
    "GQ": Array [
      99,
    ],
    "GT": Array [
      "0",
    ],
    "PL": Array [
      0,
      10000,
    ],
  },
  "HG00103": Object {
    "CN": null,
    "CNL": null,
    "CNP": null,
    "CNQ": null,
    "GP": null,
    "GQ": null,
    "GT": null,
    "PL": null,
  },
  "HG001055": Object {
    "CN": null,
    "CNL": null,
    "CNP": null,
    "CNQ": null,
    "GP": null,
    "GQ": null,
    "GT": null,
    "PL": null,
  },
}
`;

exports[`VCF parser for Y chrom (haploid) can parse a line from the VCF spec 3`] = `
Variant {
  "ALT": Array [
    "A",
  ],
  "CHROM": "Y",
  "FILTER": "PASS",
  "ID": Array [
    "rs11575897",
  ],
  "INFO": Object {
    "AA": Array [
      "G",
    ],
    "AC": Array [
      22,
    ],
    "AF": Array [
      0.0178427,
    ],
    "AFR_AF": Array [
      0,
    ],
    "AMR_AF": Array [
      0,
    ],
    "AN": Array [
      1233,
    ],
    "DP": Array [
      84761,
    ],
    "EAS_AF": Array [
      0.0902,
    ],
    "EUR_AF": Array [
      0,
    ],
    "EX_TARGET": true,
    "NS": Array [
      1233,
    ],
    "SAS_AF": Array [
      0,
    ],
    "VT": Array [
      "SNP",
    ],
  },
  "POS": 2655180,
  "QUAL": 100,
  "REF": "G",
}
`;

exports[`VCF parser for Y chrom (haploid) can parse a line from the VCF spec 4`] = `
Object {
  "HG00096": Object {
    "GT": Array [
      "0",
    ],
  },
  "HG00101": Object {
    "GT": Array [
      "0",
    ],
  },
  "HG00103": Object {
    "GT": Array [
      "0",
    ],
  },
  "HG001055": Object {
    "GT": null,
  },
}
`;

exports[`VCF parser for structural variants can parse a line from the VCF spec 1`] = `
Variant {
  "ALT": Array [
    "<DEL>",
  ],
  "CHROM": "8",
  "FILTER": "PASS",
  "ID": Array [
    "28329_0",
  ],
  "INFO": Object {
    "AF": Array [
      0.971429,
    ],
    "CHR2": Array [
      "8",
    ],
    "END": Array [
      17709148,
    ],
    "Kurtosis_quant_start": Array [
      "20.524521",
    ],
    "Kurtosis_quant_stop": Array [
      "3.925926",
    ],
    "PRECISE": true,
    "RE": Array [
      34,
    ],
    "STD_quant_start": Array [
      "0.000000",
    ],
    "STD_quant_stop": Array [
      "0.000000",
    ],
    "STRANDS": Array [
      "+-",
    ],
    "STRANDS2": Array [
      "20",
      "14",
      "20",
      "14",
    ],
    "SUPTYPE": Array [
      "AL",
    ],
    "SVLEN": Array [
      33,
    ],
    "SVMETHOD": Array [
      "Snifflesv1.0.3",
    ],
    "SVTYPE": Array [
      "DEL",
    ],
  },
  "POS": 17709115,
  "QUAL": null,
  "REF": "N",
}
`;

exports[`VCF parser for structural variants can parse a line from the VCF spec 2`] = `
Object {
  "/seq/schatz/fritz/sv-paper/real/Nanopore_NA12878/mapped/ngm_Nanopore_human_ngmlr-0.2.3_mapped.bam": Object {
    "DR": Array [
      1,
    ],
    "DV": Array [
      34,
    ],
    "GT": Array [
      "1/1",
    ],
  },
}
`;

exports[`VCF parser parses a line with a breakend ALT 1`] = `
Variant {
  "ALT": Array [
    "G]17:198982]",
  ],
  "CHROM": "2",
  "FILTER": "PASS",
  "ID": Array [
    "bnd_W",
  ],
  "INFO": Object {
    "SVTYPE": Array [
      "BND",
    ],
  },
  "POS": 321681,
  "QUAL": 6,
  "REF": "G",
}
`;

exports[`VCF parser parses a line with mix of multiple breakends and non breakends 1`] = `
Variant {
  "ALT": Array [
    "CTATGTCG",
    "C[2 : 321682[",
    "C[17 : 198983[",
  ],
  "CHROM": "13",
  "FILTER": "PASS",
  "ID": Array [
    "bnd_U",
  ],
  "INFO": Object {
    "MATEID": Array [
      "bnd V",
      "bnd Z",
    ],
    "SVTYPE": Array [
      "BND",
    ],
  },
  "POS": 123456,
  "QUAL": 6,
  "REF": "C",
}
`;

exports[`can parse breakends 1`] = `
Array [
  Variant {
    "ALT": Array [
      "G]8:107653520]",
    ],
    "CHROM": "11",
    "FILTER": "PASS",
    "ID": Array [
      "MantaBND:0:2:3:0:0:0:1",
    ],
    "INFO": Object {
      "BND_DEPTH": Array [
        "216",
      ],
      "CIPOS": Array [
        0,
        2,
      ],
      "HOMLEN": Array [
        2,
      ],
      "HOMSEQ": Array [
        "TT",
      ],
      "MATEID": Array [
        "MantaBND:0:2:3:0:0:0:0",
      ],
      "MATE_BND_DEPTH": Array [
        "735",
      ],
      "SVTYPE": Array [
        "BND",
      ],
    },
    "POS": 94975747,
    "QUAL": null,
    "REF": "G",
  },
  Variant {
    "ALT": Array [
      "<DEL>",
    ],
    "CHROM": "11",
    "FILTER": "PASS",
    "ID": Array [
      "MantaDEL:0:1:2:0:0:0",
    ],
    "INFO": Object {
      "CIEND": Array [
        -150,
        150,
      ],
      "CIPOS": Array [
        -156,
        156,
      ],
      "END": Array [
        94987865,
      ],
      "IMPRECISE": true,
      "SVLEN": Array [
        12112,
      ],
      "SVTYPE": Array [
        "DEL",
      ],
    },
    "POS": 94975753,
    "QUAL": null,
    "REF": "T",
  },
  Variant {
    "ALT": Array [
      "T[8:107653411[",
    ],
    "CHROM": "11",
    "FILTER": "PASS",
    "ID": Array [
      "MantaBND:0:0:1:0:0:0:0",
    ],
    "INFO": Object {
      "BND_DEPTH": Array [
        "171",
      ],
      "MATEID": Array [
        "MantaBND:0:0:1:0:0:0:1",
      ],
      "MATE_BND_DEPTH": Array [
        "830",
      ],
      "SVTYPE": Array [
        "BND",
      ],
    },
    "POS": 94987872,
    "QUAL": null,
    "REF": "T",
  },
]
`;

exports[`shortcut parsing with 1000 genomes 1`] = `
Array [
  "HG00096",
  "HG00101",
  "HG00103",
  "HG00105",
  "HG00107",
]
`;

exports[`shortcut parsing with 1000 genomes 2`] = `
Array [
  "NA21128",
  "NA21129",
  "NA21130",
  "NA21133",
  "NA21135",
]
`;

exports[`shortcut parsing with 1000 genomes 3`] = `
Array [
  Object {
    "ALT": Array [
      "A",
    ],
    "CHROM": "Y",
    "FILTER": "PASS",
    "ID": Array [
      "rs11575897",
    ],
    "INFO": Object {
      "AA": Array [
        "G",
      ],
      "AC": Array [
        22,
      ],
      "AF": Array [
        0.0178427,
      ],
      "AFR_AF": Array [
        0,
      ],
      "AMR_AF": Array [
        0,
      ],
      "AN": Array [
        1233,
      ],
      "DP": Array [
        84761,
      ],
      "EAS_AF": Array [
        0.0902,
      ],
      "EUR_AF": Array [
        0,
      ],
      "EX_TARGET": true,
      "NS": Array [
        1233,
      ],
      "SAS_AF": Array [
        0,
      ],
      "VT": Array [
        "SNP",
      ],
    },
    "POS": 2655180,
    "QUAL": 100,
    "REF": "G",
  },
  Object {
    "ALT": Array [
      "C",
    ],
    "CHROM": "Y",
    "FILTER": "PASS",
    "ID": null,
    "INFO": Object {
      "AA": Array [
        "A",
      ],
      "AC": Array [
        5,
      ],
      "AF": Array [
        0.00405515,
      ],
      "AFR_AF": Array [
        0,
      ],
      "AMR_AF": Array [
        0,
      ],
      "AN": Array [
        1233,
      ],
      "DP": Array [
        72067,
      ],
      "EAS_AF": Array [
        0.0205,
      ],
      "EUR_AF": Array [
        0,
      ],
      "EX_TARGET": true,
      "NS": Array [
        1233,
      ],
      "SAS_AF": Array [
        0,
      ],
      "VT": Array [
        "SNP",
      ],
    },
    "POS": 2655471,
    "QUAL": 100,
    "REF": "A",
  },
]
`;

exports[`shortcut parsing with vcf 4.3 bnd example 1`] = `
Array [
  Variant {
    "ALT": Array [
      "G]17:198982]",
    ],
    "CHROM": "2",
    "FILTER": "PASS",
    "ID": Array [
      "bnd_W",
    ],
    "INFO": Object {
      "SVTYPE": Array [
        "BND",
      ],
    },
    "POS": 321681,
    "QUAL": 6,
    "REF": "G",
  },
  Variant {
    "ALT": Array [
      "]13:123456]T",
    ],
    "CHROM": "2",
    "FILTER": "PASS",
    "ID": Array [
      "bnd_V",
    ],
    "INFO": Object {
      "SVTYPE": Array [
        "BND",
      ],
    },
    "POS": 321682,
    "QUAL": 6,
    "REF": "T",
  },
  Variant {
    "ALT": Array [
      "C[2:321682[",
    ],
    "CHROM": "13",
    "FILTER": "PASS",
    "ID": Array [
      "bnd_U",
    ],
    "INFO": Object {
      "SVTYPE": Array [
        "BND",
      ],
    },
    "POS": 123456,
    "QUAL": 6,
    "REF": "C",
  },
  Variant {
    "ALT": Array [
      "[17:198983[A",
    ],
    "CHROM": "13",
    "FILTER": "PASS",
    "ID": Array [
      "bnd_X",
    ],
    "INFO": Object {
      "SVTYPE": Array [
        "BND",
      ],
    },
    "POS": 123457,
    "QUAL": 6,
    "REF": "A",
  },
  Variant {
    "ALT": Array [
      "A]2:321681]",
    ],
    "CHROM": "17",
    "FILTER": "PASS",
    "ID": Array [
      "bnd_Y",
    ],
    "INFO": Object {
      "SVTYPE": Array [
        "BND",
      ],
    },
    "POS": 198982,
    "QUAL": 6,
    "REF": "A",
  },
  Variant {
    "ALT": Array [
      "[13:123457[C",
    ],
    "CHROM": "17",
    "FILTER": "PASS",
    "ID": Array [
      "bnd_Z",
    ],
    "INFO": Object {
      "SVTYPE": Array [
        "BND",
      ],
    },
    "POS": 198983,
    "QUAL": 6,
    "REF": "C",
  },
]
`;

exports[`snippet from VCF 4.3 spec 1`] = `
Array [
  Variant {
    "ALT": Array [
      "A",
    ],
    "CHROM": "20",
    "FILTER": "PASS",
    "ID": Array [
      "rs6054257",
    ],
    "INFO": Object {
      "AF": Array [
        0.5,
      ],
      "DB": true,
      "DP": Array [
        14,
      ],
      "H2": true,
      "NS": Array [
        3,
      ],
    },
    "POS": 14370,
    "QUAL": 29,
    "REF": "G",
  },
  Variant {
    "ALT": Array [
      "A",
    ],
    "CHROM": "20",
    "FILTER": Array [
      "q10",
    ],
    "ID": null,
    "INFO": Object {
      "AF": Array [
        0.017,
      ],
      "DP": Array [
        11,
      ],
      "NS": Array [
        3,
      ],
    },
    "POS": 17330,
    "QUAL": 3,
    "REF": "T",
  },
  Variant {
    "ALT": Array [
      "G",
      "T",
    ],
    "CHROM": "20",
    "FILTER": "PASS",
    "ID": Array [
      "rs6040355",
    ],
    "INFO": Object {
      "AA": Array [
        "T",
      ],
      "AF": Array [
        0.333,
        0.667,
      ],
      "DB": true,
      "DP": Array [
        10,
      ],
      "NS": Array [
        2,
      ],
    },
    "POS": 1110696,
    "QUAL": 67,
    "REF": "A",
  },
  Variant {
    "ALT": null,
    "CHROM": "20",
    "FILTER": "PASS",
    "ID": null,
    "INFO": Object {
      "AA": Array [
        "T",
      ],
      "DP": Array [
        13,
      ],
      "NS": Array [
        3,
      ],
    },
    "POS": 1230237,
    "QUAL": 47,
    "REF": "T",
  },
  Variant {
    "ALT": Array [
      "G",
      "GTCT",
    ],
    "CHROM": "20",
    "FILTER": "PASS",
    "ID": Array [
      "microsat1",
    ],
    "INFO": Object {
      "AA": Array [
        "G",
      ],
      "DP": Array [
        9,
      ],
      "NS": Array [
        3,
      ],
    },
    "POS": 1234567,
    "QUAL": 50,
    "REF": "GTC",
  },
]
`;

exports[`snippet from VCF 4.3 spec 2`] = `
Array [
  Object {
    "NA00001": Object {
      "DP": Array [
        1,
      ],
      "GQ": Array [
        48,
      ],
      "GT": Array [
        "0|0",
      ],
      "HQ": Array [
        51,
        51,
      ],
    },
    "NA00002": Object {
      "DP": Array [
        8,
      ],
      "GQ": Array [
        48,
      ],
      "GT": Array [
        "1|0",
      ],
      "HQ": Array [
        51,
        51,
      ],
    },
    "NA00003": Object {
      "DP": Array [
        5,
      ],
      "GQ": Array [
        43,
      ],
      "GT": Array [
        "1/1",
      ],
      "HQ": Array [
        null,
        null,
      ],
    },
  },
  Object {
    "NA00001": Object {
      "DP": Array [
        3,
      ],
      "GQ": Array [
        49,
      ],
      "GT": Array [
        "0|0",
      ],
      "HQ": Array [
        58,
        50,
      ],
    },
    "NA00002": Object {
      "DP": Array [
        5,
      ],
      "GQ": Array [
        3,
      ],
      "GT": Array [
        "0|1",
      ],
      "HQ": Array [
        65,
        3,
      ],
    },
    "NA00003": Object {
      "DP": Array [
        3,
      ],
      "GQ": Array [
        41,
      ],
      "GT": Array [
        "0/0",
      ],
      "HQ": null,
    },
  },
  Object {
    "NA00001": Object {
      "DP": Array [
        6,
      ],
      "GQ": Array [
        21,
      ],
      "GT": Array [
        "1|2",
      ],
      "HQ": Array [
        23,
        27,
      ],
    },
    "NA00002": Object {
      "DP": Array [
        0,
      ],
      "GQ": Array [
        2,
      ],
      "GT": Array [
        "2|1",
      ],
      "HQ": Array [
        18,
        2,
      ],
    },
    "NA00003": Object {
      "DP": Array [
        4,
      ],
      "GQ": Array [
        35,
      ],
      "GT": Array [
        "2/2",
      ],
      "HQ": null,
    },
  },
  Object {
    "NA00001": Object {
      "DP": Array [
        7,
      ],
      "GQ": Array [
        54,
      ],
      "GT": Array [
        "0|0",
      ],
      "HQ": Array [
        56,
        60,
      ],
    },
    "NA00002": Object {
      "DP": Array [
        4,
      ],
      "GQ": Array [
        48,
      ],
      "GT": Array [
        "0|0",
      ],
      "HQ": Array [
        51,
        51,
      ],
    },
    "NA00003": Object {
      "DP": Array [
        2,
      ],
      "GQ": Array [
        61,
      ],
      "GT": Array [
        "0/0",
      ],
      "HQ": null,
    },
  },
  Object {
    "NA00001": Object {
      "DP": Array [
        4,
      ],
      "GQ": Array [
        35,
      ],
      "GT": Array [
        "0/1",
      ],
    },
    "NA00002": Object {
      "DP": Array [
        2,
      ],
      "GQ": Array [
        17,
      ],
      "GT": Array [
        "0/2",
      ],
    },
    "NA00003": Object {
      "DP": Array [
        3,
      ],
      "GQ": Array [
        40,
      ],
      "GT": Array [
        "1/1",
      ],
    },
  },
]
`;

exports[`vcf 4.3 single breakends 1`] = `
Object {
  "Join": "right",
  "MateDirection": "right",
  "MatePosition": "<ctg1>:1",
  "Replacement": "C",
}
`;

exports[`vcf 4.3 single breakends 2`] = `
Object {
  "Join": "right",
  "MateDirection": "right",
  "MatePosition": "13:123457",
  "Replacement": ".",
}
`;

exports[`vcf 4.3 single breakends 3`] = `
Object {
  "Join": "left",
  "MateDirection": "left",
  "MatePosition": "13:123456",
  "Replacement": "AGTNNNNNCAT",
}
`;

exports[`vcf 4.3 single breakends 4`] = `"G."`;
